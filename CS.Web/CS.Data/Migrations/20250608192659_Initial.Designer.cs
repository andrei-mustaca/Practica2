// <auto-generated />
using System;
using CS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CS.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250608192659_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CS.Data.Models.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TelephoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("CS.Data.Models.Courier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("OrderPercent")
                        .HasColumnType("numeric");

                    b.Property<string>("TelephoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Couriers");
                });

            modelBuilder.Entity("CS.Data.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DepartureId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DestinationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("DepartureId");

                    b.HasIndex("DestinationId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CS.Data.Models.OrderAcceptance", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AcceptanceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CourierId")
                        .HasColumnType("uuid");

                    b.HasKey("OrderId");

                    b.HasIndex("CourierId");

                    b.ToTable("OrderAcceptances");
                });

            modelBuilder.Entity("CS.Data.Models.OrderHistory", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("OrderId", "OrderDate");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("OrderHistories");
                });

            modelBuilder.Entity("CS.Data.Models.Payment", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("OrderId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("CS.Data.Models.Route", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("CS.Data.Models.Order", b =>
                {
                    b.HasOne("CS.Data.Models.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CS.Data.Models.Route", "DepartureRoute")
                        .WithMany("DepartureOrders")
                        .HasForeignKey("DepartureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CS.Data.Models.Route", "DestinationRoute")
                        .WithMany("DestinationOrders")
                        .HasForeignKey("DestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("DepartureRoute");

                    b.Navigation("DestinationRoute");
                });

            modelBuilder.Entity("CS.Data.Models.OrderAcceptance", b =>
                {
                    b.HasOne("CS.Data.Models.Courier", "Courier")
                        .WithMany("OrderAcceptances")
                        .HasForeignKey("CourierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CS.Data.Models.Order", "Order")
                        .WithOne("OrderAcceptance")
                        .HasForeignKey("CS.Data.Models.OrderAcceptance", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courier");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CS.Data.Models.OrderHistory", b =>
                {
                    b.HasOne("CS.Data.Models.Order", "Order")
                        .WithOne("OrderHistory")
                        .HasForeignKey("CS.Data.Models.OrderHistory", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CS.Data.Models.Payment", b =>
                {
                    b.HasOne("CS.Data.Models.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("CS.Data.Models.Payment", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CS.Data.Models.Route", b =>
                {
                    b.HasOne("CS.Data.Models.Route", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("CS.Data.Models.Client", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CS.Data.Models.Courier", b =>
                {
                    b.Navigation("OrderAcceptances");
                });

            modelBuilder.Entity("CS.Data.Models.Order", b =>
                {
                    b.Navigation("OrderAcceptance")
                        .IsRequired();

                    b.Navigation("OrderHistory")
                        .IsRequired();

                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("CS.Data.Models.Route", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("DepartureOrders");

                    b.Navigation("DestinationOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
